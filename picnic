#!/bin/bash

# July. 26, 2017

usage() {
    echo -e "$0\n"
    echo -e "Usage:"
    echo -e "\t$0 <options> path/to/makefile another/path/makefile ..."
    echo -e "\t$0 <options> -D path/to/makefiles\n"

    echo -e "Options:"
    echo -e "\t-o\tProvide an output name for the .pdf."
    echo -e "\t-d\tProvide a filename with documentation for the project."
    echo -e "\t-e\tExclude files matching given regex (for use with \`-D')."
    echo -e "\t-n\tDisable links in the PDF."
    echo -e "\t-v\tVerbose 1: Print out some helpful info (no pdfLaTeX)," \
                "also keep intermediate files."
    echo -e "\t-V\tVerbose 2: Don't silence pdfLaTeX output, also keep" \
                "intermediate files."
    echo -e "\t-h\tShow this screen.\n"
    echo -e "* Note that paths to makefiles (first option) cannot be combined" \
                "with \`-D' syntax."
    echo -e "* Note all options must precede file list."
    }

if [ $# -eq 0 ]; then usage; exit 1; fi

files=""

title="Makefile Documentation"
directory=""
exclude="not a regex"
docfile=""
verbose=0
projdir=""

lib=$(dirname $0)
called=$PWD
links=yes

while getopts ":o:t:D:e:d:p:nvVh" opt
do
    case $opt in
	o)
        # Strip spaces from file name
	    chosenname=$(echo ${OPTARG} | sed -e 's/[[:space:]]//g')
	    ;;
	D)
	    if [ -d $OPTARG ]
	    then
		  directory=$OPTARG
		  echo "Reading all *.mk files from $directory and its subdirectories."
	    else
		  echo "$OPTARG is not a directory."
		  usage
		  exit 1
	    fi
	    ;;
	e)
	    exclude="$OPTARG"
	    ;;
	d)
	    docfile=$OPTARG
	    ;;
	t)
	    title="$OPTARG"
	    ;;
	v)
	    verbose=1
        ;;
    V)
        verbose=2
	    ;;
	p)
	    projdir=$OPTARG
	    ;;
    n)
        links=no
        ;;
	h)
	    usage
	    exit 0
	    ;;
	\?)
	    echo "-$OPTARG is not a valid option"
	    usage
	    exit 1
	    ;;
    esac
done

if [[ ! ${docfile} == "" ]] ; then
    echo $docfile
fi

# remove flags and their arguments, keep the rest as input
shift $(( $OPTIND - 1 ))

# Set the output file name

if [ ! ${chosenname} == "" ] ; then
    # If the user supplied a name, use it.
    # Remove any extension and replace it with pdf
    outfile="${chosenname%.*}.pdf"
else
    # If the user didn't supply a name;
    if [ ${#} -eq 1 ] ; then
        # and there is only one file, use that file's name
        outfile="${1%.*}.pdf"
    else
        # otherwise, if theres >1 file, use a default name
        outfile="makedocumentation.pdf"
    fi
fi
echo "Outfile is ${outfile}"

# If the outfile exists, inform user it is being deleted.
if [ -f ${outfile} ]
then
    echo "Deleting old ${outfile}."
    rm ${outfile}
fi

if [ "$directory" = "" ]
then
    # if no directory was supplied, take all arguments
    files=$@
else
    # if a directory was supplied, use it.
    files=$(find $directory \
        -regextype posix-extended -regex '.+\.mk|.*[Mm]akefile$')
    for f in $files
    do
	if [[ $f == $exclude ]]
	then
	    echo "Excluding $f"
	    files=$(echo $files | sed "s|\s*$f\s*||g")
	fi
    done
fi

if [ "$files" == "" ] ; then usage; exit 1; fi

tmpdir=$(mktemp -d /tmp/picnic.XXXXX)

echo "Working in $tmpdir"

# Make sure that no options were given after the filenames
exitflag=0
for f in $files
do
    if [[ ${f:0:1} == "-" ]]
    then
	exitflag=1
    fi
done
if [ $exitflag -eq 1 ]
then
    usage
    exit 1
fi


# Check for exceptions and skip files if necessary
for f in $files
do
    grep "#*NODOC" $f -q
    if [ $? -eq 0 ]
    then
	echo "$f contains #*NODOC directive, skipping."
	files=$(echo $files | sed "s|\s*$f\s*||g")
    fi
done

# make sure we haven't accidentally removed all files
if [ $(echo $files | wc -w) -eq 0 ]
then
    echo "No valid files."
    exit 1
fi

# save good files for LaTeX to open
for i in ${files}
do
    echo $(basename $i) >> $tmpdir/header.txt
done

# run python to get *.txt files
if [[ verbose -eq 0 ]]
then
    python ${lib}/picnic-makedoc.py ${files}
else
    python ${lib}/picnic-makedoc.py -v ${files}
fi


# if something went wrong with python, we catch it here
if [ ! -s targets.txt ] || [ ! -s intermediates.txt ] || [ ! -s variables.txt ]
then
   echo "One or more output files is empty. This probably isn't what you" \
            "want; check your inputs."
   exit 1
fi

## Apply to everyone

outputfiles="targets.txt variables.txt intermediates.txt functions.txt"

# sanitize & (remove from comments before proceeding)
sed -i -e 's/\&/and/g' ${outputfiles}

# prepare for LaTeX
# change ; to & for tabular, allow linebreaks at /,: (for paths)
sed -i -e 's/;/\&/g' -e 's/[/]/\\discretionary{&}{}{&}/g' targets.txt \
    variables.txt functions.txt

# escape $, #, %, better <'>, allow breaking at :,/'
# breaking at :,/ is important for path and assignments to PATH
sed -i -e 's/[$#]/\\&/g' -e 's/%/{\\color{blue}\\%}/g' \
    -e "s/'/\\\textquotesingle{}/g" ${outputfiles}

# collapse second and third cols of variables.txt and functions.txt into a
## single cell
awk 'BEGIN {FS="&"} ;
        {print $1" \\newline (\\hyperref["$5"]{"$4"}) & \\texttt{"$2"} \
            \\newline "$3" \\\\"}' \
    variables.txt > variables_tmp.txt && mv variables_tmp.txt variables.txt

awk 'BEGIN {FS="&"} ;
	    {print $1" \\newline (\\hyperref["$4"]{"$3"}) & "$2" \\\\"}' \
    functions.txt > functions_tmp.txt && mv functions_tmp.txt functions.txt

# add hyperlinking and \\ to the end of the line for targets.txt
awk 'BEGIN {FS="&"} ;
        {print $1" \\newline (\\hyperref["$4"]{"$3"}) & "$2" \\\\"}' \
    targets.txt > targets_tmp.txt && mv targets_tmp.txt targets.txt

# escape $, %, #, & in intermediates.txt
awk 'BEGIN {FS=";"} ;
    {print "\\item [\\texttt{"$1"}] \\hfill \\hyperref["$4"]{\\texttt{"$3"}} \
        \\newline "$2}' \
    intermediates.txt > intermediates_tmp.txt && \
    mv intermediates_tmp.txt intermediates.txt

mv variables.txt ${tmpdir}/
mv targets.txt ${tmpdir}/
mv intermediates.txt ${tmpdir}/
mv functions.txt ${tmpdir}/

echo "Running PdfLaTeX ..."

if [ ${docfile}x == "x" ]
then
    inputdesc="No description supplied."
else
    inputdesc=$(cat "$docfile")
fi

if [ ${projdir}x == "x" ]
then
    projdir=$PWD
fi

echo "\begin{center}
            {\Huge \textbf{${title}}}
        \end{center}

        \tableofcontents*

        \section{This File}
        \label{intro}

        \begin{easylist}[itemize]

            & This document was prepared on \Today{} at \currenttime{} by
            \texttt{$(whoami)}.

            & Prepared in: \texttt{$projdir}

            & This file documents the following makefiles:
            \begin{sloppypar}
                \texttt{${files}}
            \end{sloppypar}
        \end{easylist}

        \subsection{Description}
        ${inputdesc}

        \subsection{Files}
        \begin{description}" > $tmpdir/descriptions.tex

> $tmpdir/makefiles.tex
for i in ${files}
do
    if [ -f ${PWD}/${i} ]
    then
        # If a relative path was given
        location=${PWD}/${i}
    elif [ -f ${i} ]
    then
        # If a full path was given
        location=${i}
    else
        # If it can't be found anywhere
        echo "Trouble finding file ${i}"
        continue
    fi

    echo "\subsection{\texttt{"$(basename ${i})"}}
          \begingroup
          \catcode\`\_=12
          \label{"$(echo $(basename $i) | sed 's/[^a-zA-Z]//g')"}
          \lstinputlisting{"${location}"}
          \endgroup" >> $tmpdir/makefiles.tex

    if [ $(grep "#\*[^S][^K][^I][^P]" $i -c) -gt 0 ]
    then
	   description=$(grep "#\*" $i | sed  -e 's/\n/; /g' -e 's/#\*\s*//' \
                        -e 's/[\{}_^#&$%~]/\\&/g')
    else
	   description="No description supplied."
    fi

    echo "\item [\texttt{$i}] $description" >> $tmpdir/descriptions.tex
done

echo "\end{description}" >> $tmpdir/descriptions.tex

cp ${lib}/*.tex $tmpdir/

if [ $links == "no" ] ; then
    sed -i $tmpdir/picnic-tables.tex -e 's/^% draft,/draft,/'
fi

cd $tmpdir
if [ $verbose -gt 1 ] ; then
    # output all of pdflatex's gobbledygook
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode \
        picnic-tables.tex
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode \
        picnic-tables.tex
else
    # redirect STDOUT to /dev/null
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode \
        picnic-tables.tex 1> /dev/null
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode \
        picnic-tables.tex 1> /dev/null
fi
cd $called

cp $tmpdir/picnic-tables.pdf $PWD/${outfile}

if [ $? -eq 0 ] ; then echo "Saved to $PWD/${outfile} -- \"${title}\"" ; fi

if [ $verbose -eq 1 ] ; then
    echo "Temporary files saved in $tmpdir/."
fi
