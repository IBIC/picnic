#!/bin/bash

usage() {
    echo -e "$0\n"
    echo -e "Usage:"
    echo -e "\t$0 <options> path/to/makefile another/path/makefile ..."
    echo -e "\t$0 <options> -D path/to/makefiles\n"
    echo -e "Options:"
    echo -e "\t-o\tProvide an output name for the .pdf."
    echo -e "\t-d\tProvide a filename with documentation for the project."
    echo -e "\t-e\tExclude files matching given regex (for use with \`-D')."
    echo -e "\t-v\tVerbose: Don't silence pdfLaTeX output, also keep intermediate files."
    echo -e "\t-h\tShow this screen.\n"
    echo -e "* Note that paths to makefiles (first option) cannot be combined with \`-D' syntax."
    }

if [ $# -eq 0 ]; then usage; exit 1; fi

files=""

outfile="makedocumentation.pdf"
title="Makefile Documentation"
directory=""
exclude="not a regex"
docfile=""
verbose=0
projdir=""

lib=$(dirname $0)
called=$PWD

while getopts ":o:t:D:e:d:p:vh" opt
do
    case $opt in
	o)
	    outfile=$OPTARG
	    if [[ $outfile != *.pdf ]]
	    then
		outfile=$(basename $outfile).pdf
	    fi
	    echo "Outfile is $outfile"
	    ;;
	D)
	    if [ -d $OPTARG ]
	    then
		directory=$OPTARG
		echo "Reading all *.mk files from $directory and its subdirectories."
	    else
		echo "$OPTARG is not a directory."
		usage
		exit 1
	    fi
	    ;;
	e)
	    exclude="$OPTARG"
	    ;;
	d)
	    docfile=$OPTARG
	    ;;
	t)
	    title="$OPTARG"
	    ;;
	v)
	    verbose=1
	    ;;
	p)
	    projdir=$OPTARG
	    ;;
	h)
	    usage
	    exit 0
	    ;;
	\?)
	    echo "-$OPTARG is not a valid option"
	    usage
	    exit 1
	    ;;
    esac
done

echo $docfile

# remove flags and their arguments, keep the rest as input
shift $(( $OPTIND - 1 ))

if [ "$directory" = "" ]
then
    # if no directory was supplied, take all arguments
    files=$@
else
    # if a directory was supplied, use it.
    files=$(find $directory -regextype posix-extended -regex '.+\.mk|.*[Mm]akefile$')
    for f in $files
    do
	if [[ $f == $exclude ]]
	then
	    echo "Excluding $f"
	    files=$(echo $files | sed "s|\s*$f\s*||g")
	fi
    done
fi

if [ "$files" == "" ] ; then usage; exit 1; fi

#mkdir -p sdmf-output/
tmpdir=$(mktemp -d /tmp/picnic.XXXXX)
#tmpdir=$(mkdir -p tmp/)

echo "Working in $tmpdir"

# Check for exceptions and skip files if necessary
for f in $files
do
    grep "#*NODOC" $f -q
    if [ $? -eq 0 ]
    then
	echo "$f contains #*NODOC directive, skipping."
	files=$(echo $files | sed "s|\s*$f\s*||g")
    fi
done

# make sure we haven't accidentally removed all files
if [ $(echo $files | wc -w) -eq 0 ]
then
    echo "No valid files."
    exit 1
fi

# save good files for LaTeX to open
for i in ${files}
do
    echo $(basename $i) >> $tmpdir/header.txt
done

# run python to get *.txt files
python ${lib}/makemakedoc.py ${files}

# if something went wrong with python, we catch it here
if [ ! -s targets.txt ] || [ ! -s intermediates.txt ] || [ ! -s variables.txt ]
then
   echo "One or more output files is empty. This probably isn't what you want; check your inputs."
   exit 1
fi

## Apply to everyone

outputfiles="targets.txt variables.txt intermediates.txt"

# sanitize & (remove from comments before proceeding)
sed -i -e 's/\&/and/g' targets.txt variables.txt intermediates.txt

# prepare for LaTeX
# change ; to & for tabular, allow linebreaks at /,: (for paths)
sed -i -e 's/;/\&/g' -e 's/[/]/\\discretionary{&}{}{&}/g' targets.txt variables.txt

# escape $, #, %, better <'>, allow breaking at :,/'
# breaking at :,/ is important for path and assignments to PATH
sed -i -e 's/[$#]/\\&/g' -e 's/%/{\\color{blue}\\%}/g' -e "s/'/\\\textquotesingle{}/g" $outputfiles

# collapse second and third cols of variables.txt into a single cell
awk 'BEGIN {FS="&"} ; {print $1" & \\texttt{"$2"} \\newline "$3" & \\hyperref["$5"]{"$4"}  \\\\"}' variables.txt > variables_tmp.txt && mv variables_tmp.txt variables.txt

# add hyperlinking and \\ to the end of the line for targets.txt
awk 'BEGIN {FS="&"} ; {print $1" & "$2" & \\hyperref["$4"]{"$3"}"}' targets.txt > targets_tmp.txt && mv targets_tmp.txt targets.txt
sed -i -e 's/$/ \\\\/g' targets.txt

# escape $, %, #, & in intermediates.txt
awk 'BEGIN {FS=";"} ; {print "\\item [\\texttt{"$1"}] \\hfill \\hyperref["$4"]{\\texttt{"$3"}} \\newline "$2}' intermediates.txt > intermediates_tmp.txt && mv intermediates_tmp.txt intermediates.txt

mv variables.txt $tmpdir/
mv targets.txt $tmpdir/
mv intermediates.txt $tmpdir/

echo "Running PdfLaTeX ..."

if [ ${docfile}x == "x" ]
then
    inputdesc="No description supplied."
else
    inputdesc=$(cat "$docfile")
fi

if [ ${projdir}x == "x" ]
then
    projdir=$PWD
fi

echo "\begin{center}
	{\Huge \textbf{${title}}}

	{\large Documenting makefiles: \texttt{${files}} }

	\textit{\Today}
        \end{center}

        \tableofcontents*

        \section{This File}
        \label{intro}

        This document was prepared on \Today{} at \currenttime{} by \texttt{$(whoami)}.
        \newline\noindent Project Directory: \texttt{$projdir}

        \subsection{Description}
        ${inputdesc}

        \subsection{Files}
        \begin{description}" > $tmpdir/descriptions.tex

> $tmpdir/makefiles.tex
for i in ${files}
do
    echo "\subsection{\texttt{"$(basename ${i})"}}
          \begingroup
          \catcode\`\_=12
          \label{"$(echo $(basename $i) | sed 's/[^a-zA-Z]//g')"}
          \lstinputlisting{"${PWD}/${i}"}
          \endgroup" >> $tmpdir/makefiles.tex

    if [ $(grep "#\*[^S][^K][^I][^P]" $i -c) -gt 0 ]
    then
	description=$(grep "#\*" $i | sed  -e 's/\n/; /g' -e 's/#\*\s*//')
    else
	description="No description supplied."
    fi

    echo "\item [\texttt{$i}] $description" >> $tmpdir/descriptions.tex
done

echo "\end{description}" >> $tmpdir/descriptions.tex

cp ${lib}/*.tex $tmpdir/

cd $tmpdir
if [ $verbose -eq 1 ] ; then
    # output all of pdflatex's gobbledygook
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode tables.tex
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode tables.tex
else
    # redirect STDOUT to /dev/null
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode tables.tex 1 > /dev/null
    pdflatex -shell-escape -synctex=1 -interaction=nonstopmode tables.tex 1 > /dev/null
fi
cd $called

cp $tmpdir/tables.pdf $PWD/$outfile

if [ $? -eq 0 ] ; then echo "Saved to $PWD/$outfile -- \"${title}\"" ; fi
